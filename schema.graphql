interface Actor {
  id: ID!
}

type Producer implements Actor @entity  {
  id: ID!
  farms: [Farm!] @derivedFrom(field: "owner")
  coffeeBatches: [CoffeeBatch!]! @derivedFrom(field: "owner")
  allowedCooperatives: [Cooperative!]!
  allowedTasters: [Taster!]!
  allowedValidators: [Validator!]!
  certificates: [Certificate!]! @derivedFrom(field: "producer")
}

type Cooperative implements Actor @entity  {
  id: ID!
  producers: [Producer!]! @derivedFrom(field: "allowedCooperatives")
}

type Taster implements Actor @entity  {
  id: ID!
  cupProfiles: [CupProfile!]! @derivedFrom(field: "taster")
  producers: [Producer!]! @derivedFrom(field: "allowedTasters")
}

type Certifier implements Actor @entity  {
  id: ID!
  certificates: [Certificate!]! @derivedFrom(field: "certifier")
}

type Technician implements Actor @entity  {
  id: ID!
}

type Validator implements Actor @entity {
  id: ID!
  producers: [Producer!]! @derivedFrom(field: "allowedValidators")
}

type Benefit implements Actor @entity {
  id: ID!
}

type Roaster implements Actor @entity {
  id: ID!
}

type Farm @entity {
    id: ID!
    owner: Producer!
    name: String!
    country: String!
    region: String!
    village: String!
    story: String!
    coffeeBatches: [CoffeeBatch!]! @derivedFrom(field: "farm")
}

type CoffeeBatch @entity {
    id: ID!
    owner: Producer!
    farm: Farm!
    altitude: Int!
    variety: String!
    process: String
    size: BigInt!
    coffeeState: String!
    additionalInformation: String
    cupProfiles: [CupProfile!]! @derivedFrom(field: "coffeeBatch")
    certificates: [Certificate!]! @derivedFrom(field: "coffeeBatches")
}

type CupProfile @entity {
    id: ID!
    coffeeBatch: CoffeeBatch!
    taster: Taster!
    profile: String!
    imageHash: String
    cuppingNote: Int!
}

type Certificate @entity {
    id: ID!
    certifier: Certifier!
    name: String!
    imageHash: String!
    description: String!
    additionalInformation: String!
    coffeeBatches: [CoffeeBatch!]!
}



